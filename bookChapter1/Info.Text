<?php

type data:
    
    integer(int) = Цяло число. Диапазон на стойностите 2 147 483 648 до -2 147 483 647;
    boolean = логически тип данни;
    double = реално число с много голяма точност;
    string = низ;
    array = масив;
    object = Езикът PHP е обектно ориентиран. Достъп до свойствтата на обекта може да получим с помощта на оператора ->, например $human->age;
    mixed = Нов тип, който се появавя в PHP8. Той е екивавелнтен на типа array|bool|callable|int|float|object|resource|string|null. Когато параметър е деклариран без тип, то неговият тип е mixed.;
    
    За проверка на типа на променливата може да се използват следните функции:
    is_integer($x) -> връща true, ако подадената променлива е цяло число;
    is_double($х) -> връща true, ако подадената променлива е реално числол;
    is_string($x) -> връща true, ако подадената променлива е низ;
    is_array($x) -> връща true, ако подадената променлива е масив;
    is_object($x) -> връща true, ако подадената променлива е обект;
    is_boolean($x) -> връща true, ако променливата е логическа;
    gettype($x) -> връща низа, описващ типа на променливата: integer, double, string и т.н.;
    
    Принудително можем да сменим типа на променливата:
    settype($var, $type) --> settype($x, string);
    $price = (int)$xml->price; -> в този случай стойността на $xml->price ще бъде приведена към тип int.;
    
    Константи:
    Те могат да бъдат променяни само един път и то при деклариране на константите. Константа може да бъде обяване с функцията defined($constant_name) define($constant_name, $value); define(string $constant_name, mixed $value,  $case_insensitive = false);
    define(string $constant_name, mixed $value,  $case_insensitive = false) --> първият параметър е името на самата константа, вторият е стойността на константата, а третият определя дали да се отчита регистърът на буквите true = да , false = не;
    
    Действия с променливи:        
    Може да се изпълняват 3 вида действия с променливи:
        - проверка за съществуване
        - инициализация на променлива
        - унищожаване на променлива
    
    Проверка за съществуване:
        - isset() -> която връща true ако променливата съществува. Такава проверка е полезна, когато променливите се получават отвън HTML Форми.
        Те могат да бъдат зададени с методите GEТ и POST
    Унищожаване на променливата:
        Използва се когато трябва да освободим памет, а променливата заема, голяма място.
        - unset() -> предава се на променливата unset($var);
    Инициализация на променлива:
        Инициализацията се определя от интерпретатора. Присвояване се прави чрез $var = 1;
        
    Аритметични операции:
        А+Б = събиране;
        А-Б = изваждане;
        А*Б = умножение;
        А/Б = деление;
        А%Б = остатък на делението на А и Б;
        А++ - Инкрементиране;
        А-- - Декрементиране;
    
    Промяна на приоритет:
        използват се скоби
    
    Логически оператори:
        == - равно
        != - не е равно
        < - по-голямо
        > - по-малко
        >= по-голямо или равно
        <= по-малко или равно
        <=> spaceship оператор от ПХП7
        
        <=> връща съответно -1, 0 или +1 ако $а е съответно по-малко от $b, равно на $b или по-голямо от $b.
            Операторът е подходящ за използване в callbacl за потребителски функции за сортиране usort($array, $callback).
        
        В php можем да сравняваме само обикновенни променливи, но не и масиви и обекти.
        
        NOT, AND и OR:
        !a - връща true, ако $а е лъжа, и обратното (отрицание - NOT)
        a && b - връща true, ако а и b са истини(логическа операциа И-AND)
        a || b - връща true, ако е истинна поне една от стойностите или всички (логическа операца или - or)
        
     Преоритет:
        В пхп8 се появява възможност за промяна на приоритетите на оператора за конкатенация със скоби echo(sum: . $a) + $b
            
     Низове и низови операции:
        
        Низовите операции в PHP са само 2:
        - $s1 . $s2 - конкатенира два низа
        - $s1[n] - обръщане към символ с номер n в низа
     
    Референции:
        Делят се на две групи:
        - Символни - най-обикновенна променлива, която съдържа името на друга променлива
        - Твърди - могат да се разглеждат като псевдоними на променливи. Твърди референции се създават с оператора §;
    
    За да се разкъса връзката между референция и променлива трябва да се използва unset($var);
    Променливата не може да бъде изтрира, докато към нея се отнася поне една референция.
    
    Операторът ? - Съкратена форма на тернарна условна операция
            Изглежда така: о1 ? о2 : о3
            Ако о1 е истинно, тогава се изпълнява о2 в противен случай о3.
    В PHP7 се появява нов оператор ?? (NULL COALESCING OPERATOR), който проверява дали променливата съществува и връща или нейната стойност или стойност по подразбиране.
            
    IF-ELSE КОНСТРУКЦИЯ:
        if ()логически израз)
            оператор 1;
        elseif
            оператор 2;
        else
            оператор 3;
        
        Първият оператор ще бъде изпълнен, ако логическият израз е истинен, а вторият - ако логическият израз е лъжа. 
        по същата логика и за 3-ти!
                
    
    Цикли:
        for --> Използва се за изпълнение на някякво събитие със строго определен брой
            for(комданди за инициализация; условие; команди след итерацията) {тяло на цикъла}
        while --> Използва се за изпълненение на някакво събитие, на което не сме наясно колко пъти трябва да се върти. (т.е. докато условието не стане истинност)
            while (логически израз)
                оператор;
            Отначало цикълът изчислява стойността на логическият израз. 
        do{
                тяло на цикъла;
        }
        while (условие);
        
    Оператор break и continue
        break - прекратява работата на целия цикъл
        continue - само текущата итерация
            
    SWITCH:
       Нарича се конструкция за избор.
            switch (израз){
                case стойност : оператори;
            }
            
    MATCH В PHP8 се появява оператор заместник на SWITCH:
        echo match($v)
      
            
    Инструкциите INCLUDE и require
        include  - по-време на изпълнението на нашият сценарии
        ПХП преминава през 1, 2, 3 и т.н. ред докато не стигне до include. След това ПХП прекратява обработката от нашият сценарий и преминава към файла, всключен в include.
        require  - позволява влючването на кода преди изпълнението на сценария.
        Файла се включва преди изпълнението на сценария и ПХП не чада докато указаният допълнителен файл не бъде транслиран.
        require_once и include_once  - ПХП проверява дали този файл вече не е бил включен в изпълнението на програмата.